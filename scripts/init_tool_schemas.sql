INSERT INTO public."ToolSchemas" (
        id,
        "name",
        description,
        command,
        args,
        "envSchema",
        "createdAt",
        "updatedAt",
        "querySchema",
        url,
        "headersSchema"
    )
VALUES (
        'mcp_server_time',
        'Time',
        'https://github.com/modelcontextprotocol/servers/tree/main/src/time',
        'uvx',
        '["mcp-server-time"]',
        '{}',
        '2025-04-11 00:53:13.173',
        '2025-04-11 00:53:13.173',
        '{}',
        '',
        '{}'
    ),
    (
        'amap-maps',
        '高德地图',
        'https://lbs.amap.com/api/mcp-server/gettingstarted',
        'npx',
        '["-y", "@amap/amap-maps-mcp-server"]',
        '{"type": "object", "title": "高德地图APIKEY", "$schema": "http://json-schema.org/draft-07/schema#", "required": ["AMAP_MAPS_API_KEY"], "properties": {"AMAP_MAPS_API_KEY": {"type": "string", "examples": ["AMAP_MAPS_API_KEY"], "description": "在高德官网申请的Key"}}, "description": "Schema for AMap API configuration", "additionalProperties": false}',
        '2025-04-12 03:58:32.546',
        '2025-04-12 03:58:32.546',
        '{}',
        '',
        '{}'
    ),
    (
        'notion-mcp-server',
        'Notion',
        'Notion API 的 MCP 服务器，使 LLM 能够与 Notion 工作区交互。此外，它还采用 Markdown 转换来减少与 LLM 通信时的上下文大小，优化令牌使用并使交互更高效。',
        'npx',
        '["-y", "@suekou/mcp-notion-server"]',
        '{"type": "object", "required": ["NOTION_API_TOKEN"], "properties": {"NOTION_API_TOKEN": {"type": "string", "description": "您的 Notion 集成令牌"}}}',
        '2025-04-12 04:20:29.915',
        '2025-04-12 04:20:29.915',
        '{}',
        '',
        '{}'
    ),
    (
        'everart-server',
        'EverArt',
        '使用 EverArt API 的 Claude Desktop 图像生成服务器。',
        'docker',
        '["run", "-i", "--rm", "-e", "{{EVERART_API_KEY}}", "mcp/everart"]',
        '{"type": "object", "required": ["EVERART_API_KEY"], "properties": {"EVERART_API_KEY": {"type": "string", "description": "您的 EverArt API 密钥"}}}',
        '2025-04-12 04:20:29.916',
        '2025-04-12 04:20:29.916',
        '{}',
        '',
        '{}'
    ),
    (
        'quickchart-server',
        'QuickChart',
        '使用 QuickChart.io 生成图表的模型上下文协议服务器。这是一个基于 TypeScript 的 MCP 服务器，提供图表生成功能。它允许您通过 MCP 工具创建各种类型的图表。',
        'npx',
        '["-y", "@gongrzhe/quickchart-mcp-server"]',
        '{}',
        '2025-04-12 04:20:29.915',
        '2025-04-12 04:20:29.915',
        '{}',
        '',
        '{}'
    ),
    (
        'sequential-thinking',
        'Sequential Thinking',
        'MCP 服务器实现，通过结构化思维过程提供动态和反思性问题解决工具。功能包括将复杂问题分解为可管理的步骤，随着理解的深入修改和完善思想，分支到替代推理路径，动态调整思想的总数，以及生成和验证解决方案假设。',
        'npx',
        '["-y", "@modelcontextprotocol/server-sequential-thinking"]',
        '{}',
        '2025-04-12 04:20:29.916',
        '2025-04-12 04:20:29.916',
        '{}',
        '',
        '{}'
    ),
    (
        'mcp-everything',
        'Everything',
        'https://github.com/modelcontextprotocol/servers/tree/main/src/everything',
        'npx',
        '["-y", "@modelcontextprotocol/server-everything"]',
        '{}',
        '2025-04-11 00:53:13.173',
        '2025-04-11 00:53:13.173',
        '{}',
        '',
        '{}'
    ),
    (
        'mcp-server-flomo',
        'Flomo',
        'https://github.com/xianminx/mcp-server-flomo?spm=5176.28197581.0.0.38db29a4oboybI',
        'npx',
        '["mcp-server-flomo"]',
        '{"type": "object", "title": "FLOMO API Configuration", "$schema": "http://json-schema.org/draft-07/schema#", "required": ["FLOMO_API_URL"], "properties": {"FLOMO_API_URL": {"type": "string", "format": "uri", "pattern": "^https?://", "examples": ["https://api.flomoapp.com"], "description": "The base URL for the FLOMO API"}}, "description": "Schema for FLOMO API configuration", "additionalProperties": false}',
        '2025-04-11 00:53:13.173',
        '2025-04-11 00:53:13.173',
        '{}',
        '',
        '{}'
    ),
    (
        'playwright-mcp',
        'Playwright',
        '提供浏览器自动化功能的 MCP 服务器，使用 Playwright。该服务器使 LLM 能够通过结构化的可访问性快照与网页交互，绕过对屏幕截图或视觉调整模型的需求。特点包括：快速轻量级 - 使用 Playwright 的可访问性树而非基于像素的输入；适合 LLM - 无需视觉模型，纯粹基于结构化数据操作；确定性工具应用 - 避免基于屏幕截图方法常见的歧义。',
        'npx',
        '["@playwright/mcp@latest"]',
        '{}',
        '2025-04-12 04:20:29.916',
        '2025-04-12 04:20:29.916',
        '{}',
        '',
        '{}'
    ),
    (
        'fetch-mcp',
        'Fetch',
        '提供网页内容获取功能的模型上下文协议服务器。该服务器使 LLM 能够检索和处理网页内容，将 HTML 转换为 Markdown 以便于使用。获取工具会截断响应，但通过使用 start_index 参数，您可以指定从何处开始提取内容。这允许模型分块阅读网页，直到找到所需信息。',
        'uvx',
        '["mcp-server-fetch"]',
        '{}',
        '2025-04-12 04:20:29.916',
        '2025-04-12 04:20:29.916',
        '{}',
        '',
        '{}'
    );
INSERT INTO public."ToolSchemas" (
        id,
        "name",
        description,
        command,
        args,
        "envSchema",
        "createdAt",
        "updatedAt",
        "querySchema",
        url,
        "headersSchema"
    )
VALUES (
        'mcp-server-alipay',
        'AliPay',
        'https://modelscope.cn/mcp/servers/@alipay/mcp-server-alipay',
        'npx',
        '["-y", "@alipay/mcp-server-alipay"]',
        '{"type": "object", "title": "AP API Configuration", "$schema": "http://json-schema.org/draft-07/schema#", "required": ["AP_APP_ID", "AP_APP_KEY", "AP_PUB_KEY"], "properties": {"AP_APP_ID": {"type": "string", "description": "AP application ID for API authentication"}, "AP_APP_KEY": {"type": "string", "description": "AP application key for API authentication"}, "AP_PUB_KEY": {"type": "string", "description": "AP public key for API verification"}}, "description": "Schema for AP API configuration", "additionalProperties": false}',
        '2025-04-15 17:04:07.048',
        '2025-04-15 17:04:07.048',
        '{}',
        '',
        '{}'
    ),
    (
        'github-mcp-server',
        'Github',
        'https://github.com/github/github-mcp-server?spm=5176.28197581.0.0.2ef029a45Jrm6b',
        'docker',
        '["run", "-i", "--rm", "-e", "GITHUB_PERSONAL_ACCESS_TOKEN", "ghcr.io/github/github-mcp-server"]',
        '{"type": "object", "title": "GitHub API Configuration", "$schema": "http://json-schema.org/draft-07/schema#", "required": ["GITHUB_PERSONAL_ACCESS_TOKEN"], "properties": {"GITHUB_PERSONAL_ACCESS_TOKEN": {"type": "string", "description": "GitHub Personal Access Token for API authentication"}}, "description": "Schema for GitHub API configuration", "additionalProperties": false}',
        '2025-04-11 00:53:13.173',
        '2025-04-11 00:53:13.173',
        '{}',
        '',
        '{}'
    ),
    (
        'negokaz-excel-mcp-server',
        'Excel',
        'https://github.com/negokaz/excel-mcp-server',
        'npx',
        '["--yes", "@negokaz/excel-mcp-server"]',
        '{"type": "object", "$schema": "http://json-schema.org/draft-07/schema#", "required": ["EXCEL_MCP_PAGING_CELLS_LIMIT"], "properties": {"EXCEL_MCP_PAGING_CELLS_LIMIT": {"type": "string", "pattern": "^[0-9]+$"}}, "additionalProperties": false}',
        '2025-04-16 13:51:20.71',
        '2025-04-16 13:51:20.71',
        '{}',
        '',
        '{}'
    ),
    (
        'cm9oc4w2e0000if6ce57wdq9r',
        'Perplexity Ask',
        'https://github.com/ppl-ai/modelcontextprotocol?spm=5176.28197581.d_mcp.1.7ba129a4cFecq2',
        'npx',
        '["-y", "server-perplexity-ask"]',
        '{"type": "object", "title": "API Key Configuration", "$schema": "http://json-schema.org/draft-07/schema#", "required": ["PERPLEXITY_API_KEY"], "properties": {"PERPLEXITY_API_KEY": {"type": "string", "default": "YOUR_API_KEY_HERE", "description": "API key for Perplexity service"}}, "description": "Schema for PERPLEXITY_API_KEY configuration", "additionalProperties": false}',
        '2025-04-19 14:50:22.934',
        '2025-04-19 14:50:22.934',
        '{}',
        '',
        '{}'
    ),
    (
        'mcp-run-python',
        'MCP Run Python',
        'https://github.com/pydantic/pydantic-ai/tree/main/mcp-run-python',
        'deno',
        '["run", "-N", "-R=node_modules", "-W=node_modules", "--node-modules-dir=auto", "jsr:@pydantic/mcp-run-python", "stdio"]',
        '{}',
        '2025-05-24 16:02:39.915',
        '2025-05-24 16:02:39.915',
        '{}',
        '',
        '{}'
    );
